on:
  workflow_dispatch:
    inputs:
      environment:
        description: "部署环境"
        required: true
        default: "staging"
      reason:
        description: "触发原因"
        required: false

jobs:
  prepare_release:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id
    steps:
    - name: Get release tag
      id: release_tag
      run: |
        release_tag="FriendlyWrt-$(date +%Y-%m-%d)"
        echo "release_tag=$release_tag" >> $GITHUB_ENV
        echo "release_tag=$release_tag" >> $GITHUB_OUTPUT

    - name: Create empty release
      id: release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.release_tag }}
        draft: false
        prerelease: false
    outputs:
      release_tag: ${{ env.release_tag }}
      upload_url: ${{ steps.release.outputs.upload_url }}

  setup_environment:
    runs-on: ubuntu-22.04
    outputs:
      cache_key: ${{ steps.cache_key.outputs.key }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Generate cache key
      id: cache_key
      run: |
        echo "key=env-cache-$(date +%Y%m%d)-$(sha256sum scripts/install_dependencies.sh | cut -d' ' -f1)" >> $GITHUB_OUTPUT
      
    - name: Cache environment
      id: env_cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.bin/repo       # 缓存到用户目录
          ~/toolchain
        key: ${{ steps.cache_key.outputs.key }}
      
    - name: Install dependencies and repo tool
      if: steps.env_cache.outputs.cache-hit != 'true'
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        # 安装环境依赖
        sudo rm -rf /etc/apt/sources.list.d
        wget https://raw.githubusercontent.com/friendlyarm/build-env-on-ubuntu-bionic/master/install.sh
        sed -i -e 's/^apt-get -y install openjdk-8-jdk/# apt-get -y install openjdk-8-jdk/g' install.sh
        sed -i -e 's/^\[ -d fa-toolchain \]/# [ -d fa-toolchain ]/g' install.sh
        sed -i -e 's/^(cat fa-toolchain/# (cat fa-toolchain/g' install.sh
        sed -i -e 's/^(tar xf fa-toolchain/# (tar xf fa-toolchain/g' install.sh
        sudo -E bash ./install.sh
        
        # 安装 repo 工具到用户目录（避免系统目录权限问题）
        mkdir -p ~/.bin
        git clone https://github.com/friendlyarm/repo
        cp repo/repo ~/.bin/
        chmod +x ~/.bin/repo
        echo "export PATH=~/.bin:$PATH" >> $GITHUB_ENV  # 添加到环境变量
        
        sudo -E git config --global user.name 'GitHub Actions'
        sudo -E git config --global user.email 'noreply@github.com'
        sudo swapoff -a
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android/sdk /usr/local/share/boost /opt/ghc
        echo "cores: $(nproc)"
        repo --version  # 验证安装

  build_friendlywrt:
    needs: [prepare_release, setup_environment]
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id
    strategy:
      matrix:
        VERSION: ['24.10']
        SET: [docker]
      fail-fast: false

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Restore environment
      uses: actions/cache@v3
      with:
        path: |
          ~/.bin/repo
          ~/toolchain
        key: ${{ needs.setup_environment.outputs.cache_key }}

    - name: Add repo to PATH
      run: |
        echo "export PATH=~/.bin:$PATH" >> $GITHUB_ENV  # 确保 PATH 包含 repo

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        mkdir -p ./artifact
        echo "cores: $(nproc)"

    - name: Download source
      run: |
        mkdir project
        cd project
        repo init --depth=1 -u https://github.com/friendlyarm/friendlywrt_manifests -b master-v${{ matrix.VERSION }} \
                -m rk3568.xml --repo-url=https://github.com/friendlyarm/repo --no-clone-bundle

        repo sync -c friendlywrt --no-clone-bundle
        repo sync -c configs --no-clone-bundle
        repo sync -c device/common --no-clone-bundle
        repo sync -c device/friendlyelec --no-clone-bundle
        repo sync -c scripts --no-clone-bundle
        repo sync -c scripts/sd-fuse --no-clone-bundle
        repo sync -c toolchain --no-clone-bundle

    - name: Apply customizations
      run: |
        cd project
        source ../scripts/add_packages.sh
        source ../scripts/custome_config.sh

    - name: Prepare dot config and feeds
      run: |
        cd project
        SUFFIX="-docker"
        DIRNAME=friendlywrt$(echo ${{ matrix.VERSION }}|awk -F . '{print $1}')${SUFFIX}
        CONFIG=rockchip${SUFFIX}
        cat > .current_config.mk <<EOL
        . device/friendlyelec/rk3568/base.mk
        TARGET_IMAGE_DIRNAME=${DIRNAME}
        TARGET_FRIENDLYWRT_CONFIG=${CONFIG}
        EOL
        DEBUG_DOT_CONFIG=1 ./build.sh friendlywrt

    - name: Download package
      id: download_packages
      run: |
        cd project/friendlywrt
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile friendlyWrt
      id: compile
      continue-on-error: true
      run: |
        cd project/friendlywrt
        make -j$(nproc) || make -j1 V=s
        echo $?

    - name: Check the result and try again
      if: steps.compile.outcome == 'failure'
      run: |
        cd project/friendlywrt
        make -j1 V=s

    - name: Create rootfs package
      id: create_rootfs_package
      run: |
        cd project
        source .current_config.mk
        SUFFIX="-docker"
        rootfs_filename="rootfs-friendlywrt-${{ matrix.VERSION }}${SUFFIX}.tgz"
        tar cvzf ../artifact/${rootfs_filename} ${FRIENDLYWRT_SRC}/${FRIENDLYWRT_ROOTFS} \
              ${FRIENDLYWRT_SRC}/${FRIENDLYWRT_PACKAGE_DIR}
        echo "rootfs_filename=$rootfs_filename" >> $GITHUB_OUTPUT

    - name: Upload rootfs package
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ./artifact/${{ steps.create_rootfs_package.outputs.rootfs_filename }}
        asset_name: ${{ steps.create_rootfs_package.outputs.rootfs_filename }}
        tag: ${{ needs.prepare_release.outputs.release_tag }}
        overwrite: true

  build_img:
    needs: [prepare_release, build_friendlywrt, setup_environment]
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id

    strategy:
      matrix:
        VERSION: ['24.10']
        CPU: [rk3568]
        SET: [docker]
      fail-fast: false
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Restore environment
      uses: actions/cache@v3
      with:
        path: |
          ~/.bin/repo
          ~/toolchain
        key: ${{ needs.setup_environment.outputs.cache_key }}

    - name: Add repo to PATH
      run: |
        echo "export PATH=~/.bin:$PATH" >> $GITHUB_ENV  # 确保 PATH 包含 repo

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        mkdir -p ./artifact
        echo "cores: $(nproc)"

    - name: Download source
      run: |
        mkdir project
        cd project
        repo init --depth=1 -u https://github.com/friendlyarm/friendlywrt_manifests -b master-v${{ matrix.VERSION }} \
                -m ${{ matrix.CPU }}.xml --repo-url=https://github.com/friendlyarm/repo --no-clone.Cundle

        repo sync -c kernel --no-clone.Cundle
        repo sync -c u-boot --no-clone.Cundle
        repo sync -c rkbin --no-clone.Cundle
        repo sync -c configs --no-clone.Cundle
        repo sync -c device/common --no-clone.Cundle
        repo sync -c device/friendlyelec --no-clone.Cundle
        repo sync -c scripts --no-clone.Cundle
        repo sync -c scripts/sd-fuse --no-clone.Cundle
        repo sync -c toolchain --no-clone.Cundle

    - name: Download friendlywrt rootfs
      uses: robinraju/release-downloader@v1.6
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        repository: ${{ github.repository }}
        tag: ${{ needs.prepare_release.outputs.release_tag }}
        fileName: "rootfs-friendlywrt-${{ matrix.VERSION }}-docker.tgz"

    - name: Prepare config
      id: config
      run: |
        cd project
        MODEL=R5S-R5C-Series
        SUFFIX="-docker"
        FILENAME=${MODEL}-FriendlyWrt-${{ matrix.VERSION }}${SUFFIX}.img
        DIRNAME=friendlywrt$(echo ${{ matrix.VERSION }}|awk -F . '{print $1}')${SUFFIX}
        CONFIG=rockchip${SUFFIX}
        cat > .current_config.mk <<EOL
        . device/friendlyelec/${{ matrix.CPU }}/base.mk
        TARGET_IMAGE_DIRNAME=${DIRNAME}
        TARGET_FRIENDLYWRT_CONFIG=${CONFIG}
        TARGET_SD_RAW_FILENAME=${FILENAME}
        EOL
        echo "img_filename=$FILENAME" >> $GITHUB_OUTPUT

    - name: Unpack friendlywrt rootfs
      run: |
        cd project
        SUFFIX="-docker"
        tar xvzf "../rootfs-friendlywrt-${{ matrix.VERSION }}${SUFFIX}.tgz"

    - name: Compile uboot and kernel
      run: |
        cd project
        ./build.sh uboot
        ./build.sh kernel
        ../scripts/3rd/add_r8125.sh  # 为 R5S 添加 R8125 驱动

    - name: Build sd image
      id: build_sd_image
      run: |
        cd project
        ./build.sh sd-img
        mv out/${{ steps.config.outputs.img_filename }} ../artifact/
        cd ../artifact/
        gzip *.img

    - name: Upload image to release
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ./artifact/${{ steps.config.outputs.img_filename }}.gz
        asset_name: ${{ steps.config.outputs.img_filename }}.gz
        tag: ${{ needs.prepare_release.outputs.release_tag }}
        overwrite: true
